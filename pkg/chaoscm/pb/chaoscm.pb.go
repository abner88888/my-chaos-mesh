// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chaoscm.proto

package chaoscm

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MemoryRequest struct {
	Quota                string   `protobuf:"bytes,1,opt,name=quota,proto3" json:"quota,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MemoryRequest) Reset()         { *m = MemoryRequest{} }
func (m *MemoryRequest) String() string { return proto.CompactTextString(m) }
func (*MemoryRequest) ProtoMessage()    {}
func (*MemoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfc7d55ae525fa65, []int{0}
}

func (m *MemoryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemoryRequest.Unmarshal(m, b)
}
func (m *MemoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemoryRequest.Marshal(b, m, deterministic)
}
func (m *MemoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemoryRequest.Merge(m, src)
}
func (m *MemoryRequest) XXX_Size() int {
	return xxx_messageInfo_MemoryRequest.Size(m)
}
func (m *MemoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MemoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MemoryRequest proto.InternalMessageInfo

func (m *MemoryRequest) GetQuota() string {
	if m != nil {
		return m.Quota
	}
	return ""
}

type CpuRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CpuRequest) Reset()         { *m = CpuRequest{} }
func (m *CpuRequest) String() string { return proto.CompactTextString(m) }
func (*CpuRequest) ProtoMessage()    {}
func (*CpuRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfc7d55ae525fa65, []int{1}
}

func (m *CpuRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CpuRequest.Unmarshal(m, b)
}
func (m *CpuRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CpuRequest.Marshal(b, m, deterministic)
}
func (m *CpuRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CpuRequest.Merge(m, src)
}
func (m *CpuRequest) XXX_Size() int {
	return xxx_messageInfo_CpuRequest.Size(m)
}
func (m *CpuRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CpuRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CpuRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MemoryRequest)(nil), "chaoscm.MemoryRequest")
	proto.RegisterType((*CpuRequest)(nil), "chaoscm.CpuRequest")
}

func init() {
	proto.RegisterFile("chaoscm.proto", fileDescriptor_dfc7d55ae525fa65)
}

var fileDescriptor_dfc7d55ae525fa65 = []byte{
	// 201 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xce, 0x48, 0xcc,
	0x2f, 0x4e, 0xce, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0xa5, 0xa4, 0xd3,
	0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0xc1, 0xc2, 0x49, 0xa5, 0x69, 0xfa, 0xa9, 0xb9, 0x05, 0x25,
	0x95, 0x10, 0x55, 0x4a, 0xaa, 0x5c, 0xbc, 0xbe, 0xa9, 0xb9, 0xf9, 0x45, 0x95, 0x41, 0xa9, 0x85,
	0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x22, 0x5c, 0xac, 0x85, 0xa5, 0xf9, 0x25, 0x89, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0x9c, 0x41, 0x10, 0x8e, 0x12, 0x0f, 0x17, 0x97, 0x73, 0x41, 0x29, 0x54, 0x8d, 0x51,
	0x2b, 0x13, 0x17, 0xbb, 0x33, 0xc8, 0x74, 0x67, 0x5f, 0x21, 0x5b, 0x2e, 0x4e, 0xd7, 0xc4, 0x12,
	0x88, 0x19, 0x42, 0x62, 0x7a, 0x30, 0x37, 0xa0, 0x18, 0x2a, 0x25, 0xa6, 0x07, 0x71, 0x83, 0x1e,
	0xcc, 0x0d, 0x7a, 0xae, 0x20, 0x37, 0x28, 0x31, 0x08, 0x39, 0x72, 0xf1, 0x06, 0xa5, 0x26, 0xe7,
	0x97, 0xa5, 0x16, 0xc1, 0x8d, 0xc0, 0xaa, 0x14, 0x8f, 0x11, 0x16, 0x5c, 0xec, 0x4e, 0xa5, 0x45,
	0x79, 0xce, 0x05, 0xa5, 0x42, 0xc2, 0x70, 0xfb, 0x11, 0xae, 0xc5, 0xa3, 0xd3, 0x8e, 0x8b, 0x0b,
	0x6a, 0x39, 0x48, 0x33, 0xc9, 0x36, 0x27, 0xb1, 0x81, 0x45, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x27, 0x99, 0xed, 0x42, 0x7a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChaosCMClient is the client API for ChaosCM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChaosCMClient interface {
	EatMemory(ctx context.Context, in *MemoryRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecoverMemory(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	BurnCpu(ctx context.Context, in *CpuRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RecoverCpu(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type chaosCMClient struct {
	cc grpc.ClientConnInterface
}

func NewChaosCMClient(cc grpc.ClientConnInterface) ChaosCMClient {
	return &chaosCMClient{cc}
}

func (c *chaosCMClient) EatMemory(ctx context.Context, in *MemoryRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chaoscm.ChaosCM/EatMemory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaosCMClient) RecoverMemory(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chaoscm.ChaosCM/RecoverMemory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaosCMClient) BurnCpu(ctx context.Context, in *CpuRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chaoscm.ChaosCM/BurnCpu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaosCMClient) RecoverCpu(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chaoscm.ChaosCM/RecoverCpu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChaosCMServer is the server API for ChaosCM service.
type ChaosCMServer interface {
	EatMemory(context.Context, *MemoryRequest) (*empty.Empty, error)
	RecoverMemory(context.Context, *empty.Empty) (*empty.Empty, error)
	BurnCpu(context.Context, *CpuRequest) (*empty.Empty, error)
	RecoverCpu(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedChaosCMServer can be embedded to have forward compatible implementations.
type UnimplementedChaosCMServer struct {
}

func (*UnimplementedChaosCMServer) EatMemory(ctx context.Context, req *MemoryRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EatMemory not implemented")
}
func (*UnimplementedChaosCMServer) RecoverMemory(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverMemory not implemented")
}
func (*UnimplementedChaosCMServer) BurnCpu(ctx context.Context, req *CpuRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnCpu not implemented")
}
func (*UnimplementedChaosCMServer) RecoverCpu(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverCpu not implemented")
}

func RegisterChaosCMServer(s *grpc.Server, srv ChaosCMServer) {
	s.RegisterService(&_ChaosCM_serviceDesc, srv)
}

func _ChaosCM_EatMemory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaosCMServer).EatMemory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chaoscm.ChaosCM/EatMemory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaosCMServer).EatMemory(ctx, req.(*MemoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaosCM_RecoverMemory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaosCMServer).RecoverMemory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chaoscm.ChaosCM/RecoverMemory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaosCMServer).RecoverMemory(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaosCM_BurnCpu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CpuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaosCMServer).BurnCpu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chaoscm.ChaosCM/BurnCpu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaosCMServer).BurnCpu(ctx, req.(*CpuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaosCM_RecoverCpu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaosCMServer).RecoverCpu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chaoscm.ChaosCM/RecoverCpu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaosCMServer).RecoverCpu(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChaosCM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chaoscm.ChaosCM",
	HandlerType: (*ChaosCMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EatMemory",
			Handler:    _ChaosCM_EatMemory_Handler,
		},
		{
			MethodName: "RecoverMemory",
			Handler:    _ChaosCM_RecoverMemory_Handler,
		},
		{
			MethodName: "BurnCpu",
			Handler:    _ChaosCM_BurnCpu_Handler,
		},
		{
			MethodName: "RecoverCpu",
			Handler:    _ChaosCM_RecoverCpu_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chaoscm.proto",
}
