// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.12.3
// source: chaosdaemon.proto

package chaosdaemon

import (
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Rule_Action int32

const (
	Rule_ADD    Rule_Action = 0
	Rule_DELETE Rule_Action = 1
)

// Enum value maps for Rule_Action.
var (
	Rule_Action_name = map[int32]string{
		0: "ADD",
		1: "DELETE",
	}
	Rule_Action_value = map[string]int32{
		"ADD":    0,
		"DELETE": 1,
	}
)

func (x Rule_Action) Enum() *Rule_Action {
	p := new(Rule_Action)
	*p = x
	return p
}

func (x Rule_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rule_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_chaosdaemon_proto_enumTypes[0].Descriptor()
}

func (Rule_Action) Type() protoreflect.EnumType {
	return &file_chaosdaemon_proto_enumTypes[0]
}

func (x Rule_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rule_Action.Descriptor instead.
func (Rule_Action) EnumDescriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{16, 0}
}

type Rule_Direction int32

const (
	Rule_INPUT  Rule_Direction = 0
	Rule_OUTPUT Rule_Direction = 1
)

// Enum value maps for Rule_Direction.
var (
	Rule_Direction_name = map[int32]string{
		0: "INPUT",
		1: "OUTPUT",
	}
	Rule_Direction_value = map[string]int32{
		"INPUT":  0,
		"OUTPUT": 1,
	}
)

func (x Rule_Direction) Enum() *Rule_Direction {
	p := new(Rule_Direction)
	*p = x
	return p
}

func (x Rule_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Rule_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_chaosdaemon_proto_enumTypes[1].Descriptor()
}

func (Rule_Direction) Type() protoreflect.EnumType {
	return &file_chaosdaemon_proto_enumTypes[1]
}

func (x Rule_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Rule_Direction.Descriptor instead.
func (Rule_Direction) EnumDescriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{16, 1}
}

type ContainerAction_Action int32

const (
	ContainerAction_KILL   ContainerAction_Action = 0
	ContainerAction_GETPID ContainerAction_Action = 1
)

// Enum value maps for ContainerAction_Action.
var (
	ContainerAction_Action_name = map[int32]string{
		0: "KILL",
		1: "GETPID",
	}
	ContainerAction_Action_value = map[string]int32{
		"KILL":   0,
		"GETPID": 1,
	}
)

func (x ContainerAction_Action) Enum() *ContainerAction_Action {
	p := new(ContainerAction_Action)
	*p = x
	return p
}

func (x ContainerAction_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerAction_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_chaosdaemon_proto_enumTypes[2].Descriptor()
}

func (ContainerAction_Action) Type() protoreflect.EnumType {
	return &file_chaosdaemon_proto_enumTypes[2]
}

func (x ContainerAction_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContainerAction_Action.Descriptor instead.
func (ContainerAction_Action) EnumDescriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{18, 0}
}

type ExecStressRequest_Scope int32

const (
	ExecStressRequest_CONTAINER ExecStressRequest_Scope = 0
	ExecStressRequest_POD       ExecStressRequest_Scope = 1
)

// Enum value maps for ExecStressRequest_Scope.
var (
	ExecStressRequest_Scope_name = map[int32]string{
		0: "CONTAINER",
		1: "POD",
	}
	ExecStressRequest_Scope_value = map[string]int32{
		"CONTAINER": 0,
		"POD":       1,
	}
)

func (x ExecStressRequest_Scope) Enum() *ExecStressRequest_Scope {
	p := new(ExecStressRequest_Scope)
	*p = x
	return p
}

func (x ExecStressRequest_Scope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecStressRequest_Scope) Descriptor() protoreflect.EnumDescriptor {
	return file_chaosdaemon_proto_enumTypes[3].Descriptor()
}

func (ExecStressRequest_Scope) Type() protoreflect.EnumType {
	return &file_chaosdaemon_proto_enumTypes[3]
}

func (x ExecStressRequest_Scope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecStressRequest_Scope.Descriptor instead.
func (ExecStressRequest_Scope) EnumDescriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{19, 0}
}

type TcHandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Major uint32 `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`
	Minor uint32 `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
}

func (x *TcHandle) Reset() {
	*x = TcHandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaosdaemon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcHandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcHandle) ProtoMessage() {}

func (x *TcHandle) ProtoReflect() protoreflect.Message {
	mi := &file_chaosdaemon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcHandle.ProtoReflect.Descriptor instead.
func (*TcHandle) Descriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{0}
}

func (x *TcHandle) GetMajor() uint32 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *TcHandle) GetMinor() uint32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

type ContainerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action      *ContainerAction `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	ContainerId string           `protobuf:"bytes,2,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
}

func (x *ContainerRequest) Reset() {
	*x = ContainerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaosdaemon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerRequest) ProtoMessage() {}

func (x *ContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaosdaemon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerRequest.ProtoReflect.Descriptor instead.
func (*ContainerRequest) Descriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{1}
}

func (x *ContainerRequest) GetAction() *ContainerAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *ContainerRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

type ContainerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid uint32 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (x *ContainerResponse) Reset() {
	*x = ContainerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaosdaemon_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerResponse) ProtoMessage() {}

func (x *ContainerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chaosdaemon_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerResponse.ProtoReflect.Descriptor instead.
func (*ContainerResponse) Descriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{2}
}

func (x *ContainerResponse) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type NetemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Netem       *Netem    `protobuf:"bytes,1,opt,name=netem,proto3" json:"netem,omitempty"`
	ContainerId string    `protobuf:"bytes,2,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Handle      *TcHandle `protobuf:"bytes,3,opt,name=handle,proto3" json:"handle,omitempty"`
	Parent      *TcHandle `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *NetemRequest) Reset() {
	*x = NetemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaosdaemon_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetemRequest) ProtoMessage() {}

func (x *NetemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaosdaemon_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetemRequest.ProtoReflect.Descriptor instead.
func (*NetemRequest) Descriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{3}
}

func (x *NetemRequest) GetNetem() *Netem {
	if x != nil {
		return x.Netem
	}
	return nil
}

func (x *NetemRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *NetemRequest) GetHandle() *TcHandle {
	if x != nil {
		return x.Handle
	}
	return nil
}

func (x *NetemRequest) GetParent() *TcHandle {
	if x != nil {
		return x.Parent
	}
	return nil
}

type Netem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time          uint32    `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Jitter        uint32    `protobuf:"varint,2,opt,name=jitter,proto3" json:"jitter,omitempty"`
	DelayCorr     float32   `protobuf:"fixed32,3,opt,name=delay_corr,json=delayCorr,proto3" json:"delay_corr,omitempty"`
	Limit         uint32    `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Loss          float32   `protobuf:"fixed32,5,opt,name=loss,proto3" json:"loss,omitempty"`
	LossCorr      float32   `protobuf:"fixed32,6,opt,name=loss_corr,json=lossCorr,proto3" json:"loss_corr,omitempty"`
	Gap           uint32    `protobuf:"varint,7,opt,name=gap,proto3" json:"gap,omitempty"`
	Duplicate     float32   `protobuf:"fixed32,8,opt,name=duplicate,proto3" json:"duplicate,omitempty"`
	DuplicateCorr float32   `protobuf:"fixed32,9,opt,name=duplicate_corr,json=duplicateCorr,proto3" json:"duplicate_corr,omitempty"`
	Reorder       float32   `protobuf:"fixed32,10,opt,name=reorder,proto3" json:"reorder,omitempty"`
	ReorderCorr   float32   `protobuf:"fixed32,11,opt,name=reorder_corr,json=reorderCorr,proto3" json:"reorder_corr,omitempty"`
	Corrupt       float32   `protobuf:"fixed32,12,opt,name=corrupt,proto3" json:"corrupt,omitempty"`
	CorruptCorr   float32   `protobuf:"fixed32,13,opt,name=corrupt_corr,json=corruptCorr,proto3" json:"corrupt_corr,omitempty"`
	Parent        *TcHandle `protobuf:"bytes,14,opt,name=parent,proto3" json:"parent,omitempty"`
	Handle        *TcHandle `protobuf:"bytes,15,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (x *Netem) Reset() {
	*x = Netem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaosdaemon_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Netem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Netem) ProtoMessage() {}

func (x *Netem) ProtoReflect() protoreflect.Message {
	mi := &file_chaosdaemon_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Netem.ProtoReflect.Descriptor instead.
func (*Netem) Descriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{4}
}

func (x *Netem) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Netem) GetJitter() uint32 {
	if x != nil {
		return x.Jitter
	}
	return 0
}

func (x *Netem) GetDelayCorr() float32 {
	if x != nil {
		return x.DelayCorr
	}
	return 0
}

func (x *Netem) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Netem) GetLoss() float32 {
	if x != nil {
		return x.Loss
	}
	return 0
}

func (x *Netem) GetLossCorr() float32 {
	if x != nil {
		return x.LossCorr
	}
	return 0
}

func (x *Netem) GetGap() uint32 {
	if x != nil {
		return x.Gap
	}
	return 0
}

func (x *Netem) GetDuplicate() float32 {
	if x != nil {
		return x.Duplicate
	}
	return 0
}

func (x *Netem) GetDuplicateCorr() float32 {
	if x != nil {
		return x.DuplicateCorr
	}
	return 0
}

func (x *Netem) GetReorder() float32 {
	if x != nil {
		return x.Reorder
	}
	return 0
}

func (x *Netem) GetReorderCorr() float32 {
	if x != nil {
		return x.ReorderCorr
	}
	return 0
}

func (x *Netem) GetCorrupt() float32 {
	if x != nil {
		return x.Corrupt
	}
	return 0
}

func (x *Netem) GetCorruptCorr() float32 {
	if x != nil {
		return x.CorruptCorr
	}
	return 0
}

func (x *Netem) GetParent() *TcHandle {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *Netem) GetHandle() *TcHandle {
	if x != nil {
		return x.Handle
	}
	return nil
}

type TbfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tbf         *Tbf   `protobuf:"bytes,1,opt,name=tbf,proto3" json:"tbf,omitempty"`
	ContainerId string `protobuf:"bytes,2,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
}

func (x *TbfRequest) Reset() {
	*x = TbfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaosdaemon_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TbfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TbfRequest) ProtoMessage() {}

func (x *TbfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaosdaemon_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TbfRequest.ProtoReflect.Descriptor instead.
func (*TbfRequest) Descriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{5}
}

func (x *TbfRequest) GetTbf() *Tbf {
	if x != nil {
		return x.Tbf
	}
	return nil
}

func (x *TbfRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

type Tbf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rate     uint64 `protobuf:"varint,1,opt,name=rate,proto3" json:"rate,omitempty"`
	Limit    uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Buffer   uint32 `protobuf:"varint,3,opt,name=buffer,proto3" json:"buffer,omitempty"`
	PeakRate uint64 `protobuf:"varint,4,opt,name=peak_rate,json=peakRate,proto3" json:"peak_rate,omitempty"`
	MinBurst uint32 `protobuf:"varint,5,opt,name=min_burst,json=minBurst,proto3" json:"min_burst,omitempty"`
}

func (x *Tbf) Reset() {
	*x = Tbf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaosdaemon_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tbf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tbf) ProtoMessage() {}

func (x *Tbf) ProtoReflect() protoreflect.Message {
	mi := &file_chaosdaemon_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tbf.ProtoReflect.Descriptor instead.
func (*Tbf) Descriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{6}
}

func (x *Tbf) GetRate() uint64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *Tbf) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Tbf) GetBuffer() uint32 {
	if x != nil {
		return x.Buffer
	}
	return 0
}

func (x *Tbf) GetPeakRate() uint64 {
	if x != nil {
		return x.PeakRate
	}
	return 0
}

func (x *Tbf) GetMinBurst() uint32 {
	if x != nil {
		return x.MinBurst
	}
	return 0
}

type QdiscRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qdisc       *Qdisc `protobuf:"bytes,1,opt,name=qdisc,proto3" json:"qdisc,omitempty"`
	ContainerId string `protobuf:"bytes,2,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
}

func (x *QdiscRequest) Reset() {
	*x = QdiscRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaosdaemon_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QdiscRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QdiscRequest) ProtoMessage() {}

func (x *QdiscRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaosdaemon_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QdiscRequest.ProtoReflect.Descriptor instead.
func (*QdiscRequest) Descriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{7}
}

func (x *QdiscRequest) GetQdisc() *Qdisc {
	if x != nil {
		return x.Qdisc
	}
	return nil
}

func (x *QdiscRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

type Qdisc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent *TcHandle `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Handle *TcHandle `protobuf:"bytes,2,opt,name=handle,proto3" json:"handle,omitempty"`
	Type   string    `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Args   []string  `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Qdisc) Reset() {
	*x = Qdisc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaosdaemon_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Qdisc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qdisc) ProtoMessage() {}

func (x *Qdisc) ProtoReflect() protoreflect.Message {
	mi := &file_chaosdaemon_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qdisc.ProtoReflect.Descriptor instead.
func (*Qdisc) Descriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{8}
}

func (x *Qdisc) GetParent() *TcHandle {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *Qdisc) GetHandle() *TcHandle {
	if x != nil {
		return x.Handle
	}
	return nil
}

func (x *Qdisc) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Qdisc) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type EmatchFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter      *EmatchFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	ContainerId string        `protobuf:"bytes,2,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
}

func (x *EmatchFilterRequest) Reset() {
	*x = EmatchFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaosdaemon_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmatchFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmatchFilterRequest) ProtoMessage() {}

func (x *EmatchFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaosdaemon_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmatchFilterRequest.ProtoReflect.Descriptor instead.
func (*EmatchFilterRequest) Descriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{9}
}

func (x *EmatchFilterRequest) GetFilter() *EmatchFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *EmatchFilterRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

type EmatchFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match   string    `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	Parent  *TcHandle `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Classid *TcHandle `protobuf:"bytes,3,opt,name=classid,proto3" json:"classid,omitempty"`
}

func (x *EmatchFilter) Reset() {
	*x = EmatchFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaosdaemon_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmatchFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmatchFilter) ProtoMessage() {}

func (x *EmatchFilter) ProtoReflect() protoreflect.Message {
	mi := &file_chaosdaemon_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmatchFilter.ProtoReflect.Descriptor instead.
func (*EmatchFilter) Descriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{10}
}

func (x *EmatchFilter) GetMatch() string {
	if x != nil {
		return x.Match
	}
	return ""
}

func (x *EmatchFilter) GetParent() *TcHandle {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *EmatchFilter) GetClassid() *TcHandle {
	if x != nil {
		return x.Classid
	}
	return nil
}

type TcFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter      *TcFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	ContainerId string    `protobuf:"bytes,2,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
}

func (x *TcFilterRequest) Reset() {
	*x = TcFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaosdaemon_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcFilterRequest) ProtoMessage() {}

func (x *TcFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaosdaemon_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcFilterRequest.ProtoReflect.Descriptor instead.
func (*TcFilterRequest) Descriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{11}
}

func (x *TcFilterRequest) GetFilter() *TcFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *TcFilterRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

type TcFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent *TcHandle `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *TcFilter) Reset() {
	*x = TcFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaosdaemon_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcFilter) ProtoMessage() {}

func (x *TcFilter) ProtoReflect() protoreflect.Message {
	mi := &file_chaosdaemon_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcFilter.ProtoReflect.Descriptor instead.
func (*TcFilter) Descriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{12}
}

func (x *TcFilter) GetParent() *TcHandle {
	if x != nil {
		return x.Parent
	}
	return nil
}

type IpSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipset       *IpSet `protobuf:"bytes,1,opt,name=ipset,proto3" json:"ipset,omitempty"`
	ContainerId string `protobuf:"bytes,2,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
}

func (x *IpSetRequest) Reset() {
	*x = IpSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaosdaemon_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpSetRequest) ProtoMessage() {}

func (x *IpSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaosdaemon_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpSetRequest.ProtoReflect.Descriptor instead.
func (*IpSetRequest) Descriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{13}
}

func (x *IpSetRequest) GetIpset() *IpSet {
	if x != nil {
		return x.Ipset
	}
	return nil
}

func (x *IpSetRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

type IpSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cidrs []string `protobuf:"bytes,2,rep,name=cidrs,proto3" json:"cidrs,omitempty"`
}

func (x *IpSet) Reset() {
	*x = IpSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaosdaemon_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpSet) ProtoMessage() {}

func (x *IpSet) ProtoReflect() protoreflect.Message {
	mi := &file_chaosdaemon_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpSet.ProtoReflect.Descriptor instead.
func (*IpSet) Descriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{14}
}

func (x *IpSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IpSet) GetCidrs() []string {
	if x != nil {
		return x.Cidrs
	}
	return nil
}

type IpTablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule        *Rule  `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	ContainerId string `protobuf:"bytes,2,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
}

func (x *IpTablesRequest) Reset() {
	*x = IpTablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaosdaemon_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpTablesRequest) ProtoMessage() {}

func (x *IpTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaosdaemon_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpTablesRequest.ProtoReflect.Descriptor instead.
func (*IpTablesRequest) Descriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{15}
}

func (x *IpTablesRequest) GetRule() *Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *IpTablesRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action    Rule_Action    `protobuf:"varint,1,opt,name=action,proto3,enum=chaosdaemon.Rule_Action" json:"action,omitempty"`
	Direction Rule_Direction `protobuf:"varint,2,opt,name=direction,proto3,enum=chaosdaemon.Rule_Direction" json:"direction,omitempty"`
	Set       string         `protobuf:"bytes,3,opt,name=set,proto3" json:"set,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaosdaemon_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_chaosdaemon_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{16}
}

func (x *Rule) GetAction() Rule_Action {
	if x != nil {
		return x.Action
	}
	return Rule_ADD
}

func (x *Rule) GetDirection() Rule_Direction {
	if x != nil {
		return x.Direction
	}
	return Rule_INPUT
}

func (x *Rule) GetSet() string {
	if x != nil {
		return x.Set
	}
	return ""
}

type TimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Sec         int64  `protobuf:"varint,2,opt,name=sec,proto3" json:"sec,omitempty"`
	Nsec        int64  `protobuf:"varint,3,opt,name=nsec,proto3" json:"nsec,omitempty"`
	ClkIdsMask  uint64 `protobuf:"varint,4,opt,name=clk_ids_mask,json=clkIdsMask,proto3" json:"clk_ids_mask,omitempty"`
}

func (x *TimeRequest) Reset() {
	*x = TimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaosdaemon_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRequest) ProtoMessage() {}

func (x *TimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaosdaemon_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRequest.ProtoReflect.Descriptor instead.
func (*TimeRequest) Descriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{17}
}

func (x *TimeRequest) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *TimeRequest) GetSec() int64 {
	if x != nil {
		return x.Sec
	}
	return 0
}

func (x *TimeRequest) GetNsec() int64 {
	if x != nil {
		return x.Nsec
	}
	return 0
}

func (x *TimeRequest) GetClkIdsMask() uint64 {
	if x != nil {
		return x.ClkIdsMask
	}
	return 0
}

type ContainerAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action ContainerAction_Action `protobuf:"varint,1,opt,name=action,proto3,enum=chaosdaemon.ContainerAction_Action" json:"action,omitempty"`
}

func (x *ContainerAction) Reset() {
	*x = ContainerAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaosdaemon_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerAction) ProtoMessage() {}

func (x *ContainerAction) ProtoReflect() protoreflect.Message {
	mi := &file_chaosdaemon_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerAction.ProtoReflect.Descriptor instead.
func (*ContainerAction) Descriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{18}
}

func (x *ContainerAction) GetAction() ContainerAction_Action {
	if x != nil {
		return x.Action
	}
	return ContainerAction_KILL
}

type ExecStressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope     ExecStressRequest_Scope `protobuf:"varint,1,opt,name=scope,proto3,enum=chaosdaemon.ExecStressRequest_Scope" json:"scope,omitempty"`
	Target    string                  `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Stressors string                  `protobuf:"bytes,3,opt,name=stressors,proto3" json:"stressors,omitempty"`
}

func (x *ExecStressRequest) Reset() {
	*x = ExecStressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaosdaemon_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecStressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecStressRequest) ProtoMessage() {}

func (x *ExecStressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaosdaemon_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecStressRequest.ProtoReflect.Descriptor instead.
func (*ExecStressRequest) Descriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{19}
}

func (x *ExecStressRequest) GetScope() ExecStressRequest_Scope {
	if x != nil {
		return x.Scope
	}
	return ExecStressRequest_CONTAINER
}

func (x *ExecStressRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ExecStressRequest) GetStressors() string {
	if x != nil {
		return x.Stressors
	}
	return ""
}

type ExecStressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance  string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	StartTime int64  `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
}

func (x *ExecStressResponse) Reset() {
	*x = ExecStressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaosdaemon_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecStressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecStressResponse) ProtoMessage() {}

func (x *ExecStressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chaosdaemon_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecStressResponse.ProtoReflect.Descriptor instead.
func (*ExecStressResponse) Descriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{20}
}

func (x *ExecStressResponse) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *ExecStressResponse) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

type CancelStressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance  string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	StartTime int64  `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
}

func (x *CancelStressRequest) Reset() {
	*x = CancelStressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaosdaemon_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelStressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelStressRequest) ProtoMessage() {}

func (x *CancelStressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaosdaemon_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelStressRequest.ProtoReflect.Descriptor instead.
func (*CancelStressRequest) Descriptor() ([]byte, []int) {
	return file_chaosdaemon_proto_rawDescGZIP(), []int{21}
}

func (x *CancelStressRequest) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *CancelStressRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

var File_chaosdaemon_proto protoreflect.FileDescriptor

var file_chaosdaemon_proto_rawDesc = []byte{
	0x0a, 0x11, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36, 0x0a,
	0x08, 0x54, 0x63, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x22, 0x6b, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6f,
	0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x25, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x0c, 0x4e, 0x65,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x6e, 0x65,
	0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x6f,
	0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x6e,
	0x65, 0x74, 0x65, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x63, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x63, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xc8, 0x03, 0x0a, 0x05, 0x4e, 0x65, 0x74, 0x65, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x72, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x6c, 0x6f, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x72,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x6f, 0x73, 0x73, 0x43, 0x6f, 0x72,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x67, 0x61, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x72, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x64, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x72, 0x65, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x72, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x72, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x75, 0x70, 0x74, 0x43, 0x6f,
	0x72, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x2e, 0x54, 0x63, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x2d, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e,
	0x54, 0x63, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x22, 0x53, 0x0a, 0x0a, 0x54, 0x62, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x03, 0x74, 0x62, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x68,
	0x61, 0x6f, 0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x62, 0x66, 0x52, 0x03, 0x74,
	0x62, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x03, 0x54, 0x62, 0x66, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x70, 0x65, 0x61, 0x6b, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6d, 0x69, 0x6e, 0x42, 0x75, 0x72, 0x73, 0x74, 0x22, 0x5b, 0x0a, 0x0c, 0x51, 0x64, 0x69,
	0x73, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x71, 0x64, 0x69,
	0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73,
	0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x64, 0x69, 0x73, 0x63, 0x52, 0x05, 0x71, 0x64,
	0x69, 0x73, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x05, 0x51, 0x64, 0x69, 0x73, 0x63,
	0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x63, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x2d, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x63,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x6b, 0x0a, 0x13, 0x45, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x45, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61,
	0x6f, 0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x63, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x61,
	0x6f, 0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x63, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x64, 0x22, 0x63, 0x0a, 0x0f, 0x54, 0x63,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x63, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x39, 0x0a, 0x08, 0x54, 0x63, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68,
	0x61, 0x6f, 0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x63, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x5b, 0x0a, 0x0c, 0x49, 0x70,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x70,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x61, 0x6f,
	0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x70, 0x53, 0x65, 0x74, 0x52, 0x05, 0x69,
	0x70, 0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x05, 0x49, 0x70, 0x53, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x69, 0x64, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x69, 0x64, 0x72, 0x73, 0x22, 0x5b, 0x0a, 0x0f, 0x49, 0x70,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x68,
	0x61, 0x6f, 0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04,
	0x72, 0x75, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x30, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x74, 0x22,
	0x1d, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x22, 0x22,
	0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x49,
	0x4e, 0x50, 0x55, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54,
	0x10, 0x01, 0x22, 0x78, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x73, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x73, 0x65, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6e, 0x73, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6c,
	0x6b, 0x5f, 0x69, 0x64, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x63, 0x6c, 0x6b, 0x49, 0x64, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x6e, 0x0a, 0x0f,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1e, 0x0a, 0x06,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x47, 0x45, 0x54, 0x50, 0x49, 0x44, 0x10, 0x01, 0x22, 0xa6, 0x01, 0x0a,
	0x11, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x73, 0x22, 0x1f, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x50, 0x4f, 0x44, 0x10, 0x01, 0x22, 0x4e, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53,
	0x74, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x82, 0x09, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6f, 0x73,
	0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x74,
	0x65, 0x6d, 0x12, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4e, 0x65, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x65, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x06, 0x53,
	0x65, 0x74, 0x54, 0x62, 0x66, 0x12, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x62, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x62, 0x66, 0x12, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x62, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x51,
	0x64, 0x69, 0x73, 0x63, 0x12, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x2e, 0x51, 0x64, 0x69, 0x73, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x08, 0x44, 0x65, 0x6c,
	0x51, 0x64, 0x69, 0x73, 0x63, 0x12, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x2e, 0x51, 0x64, 0x69, 0x73, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0f, 0x41, 0x64,
	0x64, 0x45, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x20, 0x2e,
	0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0b, 0x44, 0x65, 0x6c,
	0x54, 0x63, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73,
	0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x63, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x41, 0x0a, 0x0a, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x49, 0x70, 0x53, 0x65, 0x74, 0x12, 0x19,
	0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x70, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0d, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x49, 0x70, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x2e, 0x49, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0d,
	0x53, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x18, 0x2e,
	0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0d, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x1d, 0x2e, 0x63, 0x68,
	0x61, 0x6f, 0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x47, 0x65, 0x74, 0x50, 0x69, 0x64, 0x12, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63,
	0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x6f,
	0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x6f,
	0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0f,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x12,
	0x20, 0x2e, 0x63, 0x68, 0x61, 0x6f, 0x73, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_chaosdaemon_proto_rawDescOnce sync.Once
	file_chaosdaemon_proto_rawDescData = file_chaosdaemon_proto_rawDesc
)

func file_chaosdaemon_proto_rawDescGZIP() []byte {
	file_chaosdaemon_proto_rawDescOnce.Do(func() {
		file_chaosdaemon_proto_rawDescData = protoimpl.X.CompressGZIP(file_chaosdaemon_proto_rawDescData)
	})
	return file_chaosdaemon_proto_rawDescData
}

var file_chaosdaemon_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_chaosdaemon_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_chaosdaemon_proto_goTypes = []interface{}{
	(Rule_Action)(0),             // 0: chaosdaemon.Rule.Action
	(Rule_Direction)(0),          // 1: chaosdaemon.Rule.Direction
	(ContainerAction_Action)(0),  // 2: chaosdaemon.ContainerAction.Action
	(ExecStressRequest_Scope)(0), // 3: chaosdaemon.ExecStressRequest.Scope
	(*TcHandle)(nil),             // 4: chaosdaemon.TcHandle
	(*ContainerRequest)(nil),     // 5: chaosdaemon.ContainerRequest
	(*ContainerResponse)(nil),    // 6: chaosdaemon.ContainerResponse
	(*NetemRequest)(nil),         // 7: chaosdaemon.NetemRequest
	(*Netem)(nil),                // 8: chaosdaemon.Netem
	(*TbfRequest)(nil),           // 9: chaosdaemon.TbfRequest
	(*Tbf)(nil),                  // 10: chaosdaemon.Tbf
	(*QdiscRequest)(nil),         // 11: chaosdaemon.QdiscRequest
	(*Qdisc)(nil),                // 12: chaosdaemon.Qdisc
	(*EmatchFilterRequest)(nil),  // 13: chaosdaemon.EmatchFilterRequest
	(*EmatchFilter)(nil),         // 14: chaosdaemon.EmatchFilter
	(*TcFilterRequest)(nil),      // 15: chaosdaemon.TcFilterRequest
	(*TcFilter)(nil),             // 16: chaosdaemon.TcFilter
	(*IpSetRequest)(nil),         // 17: chaosdaemon.IpSetRequest
	(*IpSet)(nil),                // 18: chaosdaemon.IpSet
	(*IpTablesRequest)(nil),      // 19: chaosdaemon.IpTablesRequest
	(*Rule)(nil),                 // 20: chaosdaemon.Rule
	(*TimeRequest)(nil),          // 21: chaosdaemon.TimeRequest
	(*ContainerAction)(nil),      // 22: chaosdaemon.ContainerAction
	(*ExecStressRequest)(nil),    // 23: chaosdaemon.ExecStressRequest
	(*ExecStressResponse)(nil),   // 24: chaosdaemon.ExecStressResponse
	(*CancelStressRequest)(nil),  // 25: chaosdaemon.CancelStressRequest
	(*empty.Empty)(nil),          // 26: google.protobuf.Empty
}
var file_chaosdaemon_proto_depIdxs = []int32{
	22, // 0: chaosdaemon.ContainerRequest.action:type_name -> chaosdaemon.ContainerAction
	8,  // 1: chaosdaemon.NetemRequest.netem:type_name -> chaosdaemon.Netem
	4,  // 2: chaosdaemon.NetemRequest.handle:type_name -> chaosdaemon.TcHandle
	4,  // 3: chaosdaemon.NetemRequest.parent:type_name -> chaosdaemon.TcHandle
	4,  // 4: chaosdaemon.Netem.parent:type_name -> chaosdaemon.TcHandle
	4,  // 5: chaosdaemon.Netem.handle:type_name -> chaosdaemon.TcHandle
	10, // 6: chaosdaemon.TbfRequest.tbf:type_name -> chaosdaemon.Tbf
	12, // 7: chaosdaemon.QdiscRequest.qdisc:type_name -> chaosdaemon.Qdisc
	4,  // 8: chaosdaemon.Qdisc.parent:type_name -> chaosdaemon.TcHandle
	4,  // 9: chaosdaemon.Qdisc.handle:type_name -> chaosdaemon.TcHandle
	14, // 10: chaosdaemon.EmatchFilterRequest.filter:type_name -> chaosdaemon.EmatchFilter
	4,  // 11: chaosdaemon.EmatchFilter.parent:type_name -> chaosdaemon.TcHandle
	4,  // 12: chaosdaemon.EmatchFilter.classid:type_name -> chaosdaemon.TcHandle
	16, // 13: chaosdaemon.TcFilterRequest.filter:type_name -> chaosdaemon.TcFilter
	4,  // 14: chaosdaemon.TcFilter.parent:type_name -> chaosdaemon.TcHandle
	18, // 15: chaosdaemon.IpSetRequest.ipset:type_name -> chaosdaemon.IpSet
	20, // 16: chaosdaemon.IpTablesRequest.rule:type_name -> chaosdaemon.Rule
	0,  // 17: chaosdaemon.Rule.action:type_name -> chaosdaemon.Rule.Action
	1,  // 18: chaosdaemon.Rule.direction:type_name -> chaosdaemon.Rule.Direction
	2,  // 19: chaosdaemon.ContainerAction.action:type_name -> chaosdaemon.ContainerAction.Action
	3,  // 20: chaosdaemon.ExecStressRequest.scope:type_name -> chaosdaemon.ExecStressRequest.Scope
	7,  // 21: chaosdaemon.ChaosDaemon.SetNetem:input_type -> chaosdaemon.NetemRequest
	7,  // 22: chaosdaemon.ChaosDaemon.DeleteNetem:input_type -> chaosdaemon.NetemRequest
	9,  // 23: chaosdaemon.ChaosDaemon.SetTbf:input_type -> chaosdaemon.TbfRequest
	9,  // 24: chaosdaemon.ChaosDaemon.DeleteTbf:input_type -> chaosdaemon.TbfRequest
	11, // 25: chaosdaemon.ChaosDaemon.AddQdisc:input_type -> chaosdaemon.QdiscRequest
	11, // 26: chaosdaemon.ChaosDaemon.DelQdisc:input_type -> chaosdaemon.QdiscRequest
	13, // 27: chaosdaemon.ChaosDaemon.AddEmatchFilter:input_type -> chaosdaemon.EmatchFilterRequest
	15, // 28: chaosdaemon.ChaosDaemon.DelTcFilter:input_type -> chaosdaemon.TcFilterRequest
	17, // 29: chaosdaemon.ChaosDaemon.FlushIpSet:input_type -> chaosdaemon.IpSetRequest
	19, // 30: chaosdaemon.ChaosDaemon.FlushIptables:input_type -> chaosdaemon.IpTablesRequest
	21, // 31: chaosdaemon.ChaosDaemon.SetTimeOffset:input_type -> chaosdaemon.TimeRequest
	21, // 32: chaosdaemon.ChaosDaemon.RecoverTimeOffset:input_type -> chaosdaemon.TimeRequest
	5,  // 33: chaosdaemon.ChaosDaemon.ContainerKill:input_type -> chaosdaemon.ContainerRequest
	5,  // 34: chaosdaemon.ChaosDaemon.ContainerGetPid:input_type -> chaosdaemon.ContainerRequest
	23, // 35: chaosdaemon.ChaosDaemon.ExecStressors:input_type -> chaosdaemon.ExecStressRequest
	25, // 36: chaosdaemon.ChaosDaemon.CancelStressors:input_type -> chaosdaemon.CancelStressRequest
	26, // 37: chaosdaemon.ChaosDaemon.SetNetem:output_type -> google.protobuf.Empty
	26, // 38: chaosdaemon.ChaosDaemon.DeleteNetem:output_type -> google.protobuf.Empty
	26, // 39: chaosdaemon.ChaosDaemon.SetTbf:output_type -> google.protobuf.Empty
	26, // 40: chaosdaemon.ChaosDaemon.DeleteTbf:output_type -> google.protobuf.Empty
	26, // 41: chaosdaemon.ChaosDaemon.AddQdisc:output_type -> google.protobuf.Empty
	26, // 42: chaosdaemon.ChaosDaemon.DelQdisc:output_type -> google.protobuf.Empty
	26, // 43: chaosdaemon.ChaosDaemon.AddEmatchFilter:output_type -> google.protobuf.Empty
	26, // 44: chaosdaemon.ChaosDaemon.DelTcFilter:output_type -> google.protobuf.Empty
	26, // 45: chaosdaemon.ChaosDaemon.FlushIpSet:output_type -> google.protobuf.Empty
	26, // 46: chaosdaemon.ChaosDaemon.FlushIptables:output_type -> google.protobuf.Empty
	26, // 47: chaosdaemon.ChaosDaemon.SetTimeOffset:output_type -> google.protobuf.Empty
	26, // 48: chaosdaemon.ChaosDaemon.RecoverTimeOffset:output_type -> google.protobuf.Empty
	26, // 49: chaosdaemon.ChaosDaemon.ContainerKill:output_type -> google.protobuf.Empty
	6,  // 50: chaosdaemon.ChaosDaemon.ContainerGetPid:output_type -> chaosdaemon.ContainerResponse
	24, // 51: chaosdaemon.ChaosDaemon.ExecStressors:output_type -> chaosdaemon.ExecStressResponse
	26, // 52: chaosdaemon.ChaosDaemon.CancelStressors:output_type -> google.protobuf.Empty
	37, // [37:53] is the sub-list for method output_type
	21, // [21:37] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_chaosdaemon_proto_init() }
func file_chaosdaemon_proto_init() {
	if File_chaosdaemon_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chaosdaemon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcHandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaosdaemon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaosdaemon_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaosdaemon_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaosdaemon_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Netem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaosdaemon_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TbfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaosdaemon_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tbf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaosdaemon_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QdiscRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaosdaemon_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Qdisc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaosdaemon_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmatchFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaosdaemon_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmatchFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaosdaemon_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaosdaemon_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaosdaemon_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaosdaemon_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaosdaemon_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpTablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaosdaemon_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaosdaemon_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaosdaemon_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaosdaemon_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecStressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaosdaemon_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecStressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaosdaemon_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelStressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chaosdaemon_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chaosdaemon_proto_goTypes,
		DependencyIndexes: file_chaosdaemon_proto_depIdxs,
		EnumInfos:         file_chaosdaemon_proto_enumTypes,
		MessageInfos:      file_chaosdaemon_proto_msgTypes,
	}.Build()
	File_chaosdaemon_proto = out.File
	file_chaosdaemon_proto_rawDesc = nil
	file_chaosdaemon_proto_goTypes = nil
	file_chaosdaemon_proto_depIdxs = nil
}
