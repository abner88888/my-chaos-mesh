// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.2
// source: injure.proto

package injure

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Methods []string `protobuf:"bytes,1,rep,name=methods,proto3" json:"methods,omitempty"`
	Errno   uint32   `protobuf:"varint,2,opt,name=errno,proto3" json:"errno,omitempty"`
	Random  bool     `protobuf:"varint,3,opt,name=random,proto3" json:"random,omitempty"`
	Pct     uint32   `protobuf:"varint,4,opt,name=pct,proto3" json:"pct,omitempty"`
	Path    string   `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"` // relative path (root is mountpoint)
	Delay   uint32   `protobuf:"varint,6,opt,name=delay,proto3" json:"delay,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injure_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_injure_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_injure_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetMethods() []string {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *Request) GetErrno() uint32 {
	if x != nil {
		return x.Errno
	}
	return 0
}

func (x *Request) GetRandom() bool {
	if x != nil {
		return x.Random
	}
	return false
}

func (x *Request) GetPct() uint32 {
	if x != nil {
		return x.Pct
	}
	return 0
}

func (x *Request) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Request) GetDelay() uint32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Methods []string `protobuf:"bytes,1,rep,name=methods,proto3" json:"methods,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injure_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_injure_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_injure_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetMethods() []string {
	if x != nil {
		return x.Methods
	}
	return nil
}

type InjectedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Injected bool `protobuf:"varint,1,opt,name=injected,proto3" json:"injected,omitempty"`
}

func (x *InjectedResponse) Reset() {
	*x = InjectedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_injure_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InjectedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InjectedResponse) ProtoMessage() {}

func (x *InjectedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_injure_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InjectedResponse.ProtoReflect.Descriptor instead.
func (*InjectedResponse) Descriptor() ([]byte, []int) {
	return file_injure_proto_rawDescGZIP(), []int{2}
}

func (x *InjectedResponse) GetInjected() bool {
	if x != nil {
		return x.Injected
	}
	return false
}

var File_injure_proto protoreflect.FileDescriptor

var file_injure_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x69, 0x6e, 0x6a, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x69, 0x6e, 0x6a, 0x75, 0x72, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6e, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x63, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x22, 0x24, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x22, 0x2e, 0x0a, 0x10, 0x49, 0x6e, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x32, 0xec, 0x02, 0x0a, 0x06, 0x49, 0x6e,
	0x6a, 0x75, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x69, 0x6e, 0x6a, 0x75, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0d, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0f, 0x2e, 0x69,
	0x6e, 0x6a, 0x75, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x0f, 0x2e, 0x69, 0x6e, 0x6a, 0x75, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x38,
	0x0a, 0x0b, 0x53, 0x65, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x0f, 0x2e,
	0x69, 0x6e, 0x6a, 0x75, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x08, 0x49, 0x6e, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x69,
	0x6e, 0x6a, 0x75, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_injure_proto_rawDescOnce sync.Once
	file_injure_proto_rawDescData = file_injure_proto_rawDesc
)

func file_injure_proto_rawDescGZIP() []byte {
	file_injure_proto_rawDescOnce.Do(func() {
		file_injure_proto_rawDescData = protoimpl.X.CompressGZIP(file_injure_proto_rawDescData)
	})
	return file_injure_proto_rawDescData
}

var file_injure_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_injure_proto_goTypes = []interface{}{
	(*Request)(nil),          // 0: injure.Request
	(*Response)(nil),         // 1: injure.Response
	(*InjectedResponse)(nil), // 2: injure.InjectedResponse
	(*empty.Empty)(nil),      // 3: google.protobuf.Empty
}
var file_injure_proto_depIdxs = []int32{
	3, // 0: injure.Injure.Methods:input_type -> google.protobuf.Empty
	3, // 1: injure.Injure.RecoverAll:input_type -> google.protobuf.Empty
	0, // 2: injure.Injure.RecoverMethod:input_type -> injure.Request
	0, // 3: injure.Injure.SetFault:input_type -> injure.Request
	0, // 4: injure.Injure.SetFaultAll:input_type -> injure.Request
	3, // 5: injure.Injure.Injected:input_type -> google.protobuf.Empty
	1, // 6: injure.Injure.Methods:output_type -> injure.Response
	3, // 7: injure.Injure.RecoverAll:output_type -> google.protobuf.Empty
	3, // 8: injure.Injure.RecoverMethod:output_type -> google.protobuf.Empty
	3, // 9: injure.Injure.SetFault:output_type -> google.protobuf.Empty
	3, // 10: injure.Injure.SetFaultAll:output_type -> google.protobuf.Empty
	2, // 11: injure.Injure.Injected:output_type -> injure.InjectedResponse
	6, // [6:12] is the sub-list for method output_type
	0, // [0:6] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_injure_proto_init() }
func file_injure_proto_init() {
	if File_injure_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_injure_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injure_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_injure_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InjectedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_injure_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_injure_proto_goTypes,
		DependencyIndexes: file_injure_proto_depIdxs,
		MessageInfos:      file_injure_proto_msgTypes,
	}.Build()
	File_injure_proto = out.File
	file_injure_proto_rawDesc = nil
	file_injure_proto_goTypes = nil
	file_injure_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InjureClient is the client API for Injure service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InjureClient interface {
	Methods(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Response, error)
	RecoverAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	RecoverMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error)
	SetFault(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error)
	SetFaultAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error)
	Injected(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*InjectedResponse, error)
}

type injureClient struct {
	cc grpc.ClientConnInterface
}

func NewInjureClient(cc grpc.ClientConnInterface) InjureClient {
	return &injureClient{cc}
}

func (c *injureClient) Methods(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/injure.Injure/Methods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *injureClient) RecoverAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/injure.Injure/RecoverAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *injureClient) RecoverMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/injure.Injure/RecoverMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *injureClient) SetFault(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/injure.Injure/SetFault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *injureClient) SetFaultAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/injure.Injure/SetFaultAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *injureClient) Injected(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*InjectedResponse, error) {
	out := new(InjectedResponse)
	err := c.cc.Invoke(ctx, "/injure.Injure/Injected", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InjureServer is the server API for Injure service.
type InjureServer interface {
	Methods(context.Context, *empty.Empty) (*Response, error)
	RecoverAll(context.Context, *empty.Empty) (*empty.Empty, error)
	RecoverMethod(context.Context, *Request) (*empty.Empty, error)
	SetFault(context.Context, *Request) (*empty.Empty, error)
	SetFaultAll(context.Context, *Request) (*empty.Empty, error)
	Injected(context.Context, *empty.Empty) (*InjectedResponse, error)
}

// UnimplementedInjureServer can be embedded to have forward compatible implementations.
type UnimplementedInjureServer struct {
}

func (*UnimplementedInjureServer) Methods(context.Context, *empty.Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Methods not implemented")
}
func (*UnimplementedInjureServer) RecoverAll(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverAll not implemented")
}
func (*UnimplementedInjureServer) RecoverMethod(context.Context, *Request) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverMethod not implemented")
}
func (*UnimplementedInjureServer) SetFault(context.Context, *Request) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFault not implemented")
}
func (*UnimplementedInjureServer) SetFaultAll(context.Context, *Request) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFaultAll not implemented")
}
func (*UnimplementedInjureServer) Injected(context.Context, *empty.Empty) (*InjectedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Injected not implemented")
}

func RegisterInjureServer(s *grpc.Server, srv InjureServer) {
	s.RegisterService(&_Injure_serviceDesc, srv)
}

func _Injure_Methods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InjureServer).Methods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injure.Injure/Methods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InjureServer).Methods(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Injure_RecoverAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InjureServer).RecoverAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injure.Injure/RecoverAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InjureServer).RecoverAll(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Injure_RecoverMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InjureServer).RecoverMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injure.Injure/RecoverMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InjureServer).RecoverMethod(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Injure_SetFault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InjureServer).SetFault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injure.Injure/SetFault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InjureServer).SetFault(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Injure_SetFaultAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InjureServer).SetFaultAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injure.Injure/SetFaultAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InjureServer).SetFaultAll(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Injure_Injected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InjureServer).Injected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injure.Injure/Injected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InjureServer).Injected(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Injure_serviceDesc = grpc.ServiceDesc{
	ServiceName: "injure.Injure",
	HandlerType: (*InjureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Methods",
			Handler:    _Injure_Methods_Handler,
		},
		{
			MethodName: "RecoverAll",
			Handler:    _Injure_RecoverAll_Handler,
		},
		{
			MethodName: "RecoverMethod",
			Handler:    _Injure_RecoverMethod_Handler,
		},
		{
			MethodName: "SetFault",
			Handler:    _Injure_SetFault_Handler,
		},
		{
			MethodName: "SetFaultAll",
			Handler:    _Injure_SetFaultAll_Handler,
		},
		{
			MethodName: "Injected",
			Handler:    _Injure_Injected_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "injure.proto",
}
