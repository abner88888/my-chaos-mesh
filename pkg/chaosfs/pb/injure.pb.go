// Code generated by protoc-gen-go. DO NOT EDIT.
// source: injure.proto

package injure

import (
	fmt "fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	empty "github.com/golang/protobuf/ptypes/empty"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Methods              []string `protobuf:"bytes,1,rep,name=methods,proto3" json:"methods,omitempty"`
	Errno                uint32   `protobuf:"varint,2,opt,name=errno,proto3" json:"errno,omitempty"`
	Random               bool     `protobuf:"varint,3,opt,name=random,proto3" json:"random,omitempty"`
	Pct                  uint32   `protobuf:"varint,4,opt,name=pct,proto3" json:"pct,omitempty"`
	Path                 string   `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	Delay                uint32   `protobuf:"varint,6,opt,name=delay,proto3" json:"delay,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_injure_ae03b3a2c9d5da6e, []int{0}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (dst *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(dst, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetMethods() []string {
	if m != nil {
		return m.Methods
	}
	return nil
}

func (m *Request) GetErrno() uint32 {
	if m != nil {
		return m.Errno
	}
	return 0
}

func (m *Request) GetRandom() bool {
	if m != nil {
		return m.Random
	}
	return false
}

func (m *Request) GetPct() uint32 {
	if m != nil {
		return m.Pct
	}
	return 0
}

func (m *Request) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Request) GetDelay() uint32 {
	if m != nil {
		return m.Delay
	}
	return 0
}

type Response struct {
	Methods              []string `protobuf:"bytes,1,rep,name=methods,proto3" json:"methods,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_injure_ae03b3a2c9d5da6e, []int{1}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetMethods() []string {
	if m != nil {
		return m.Methods
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "injure.Request")
	proto.RegisterType((*Response)(nil), "injure.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InjureClient is the client API for Injure service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InjureClient interface {
	Methods(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Response, error)
	RecoverAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	RecoverMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error)
	SetFault(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error)
	SetFaultAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error)
}

type injureClient struct {
	cc *grpc.ClientConn
}

func NewInjureClient(cc *grpc.ClientConn) InjureClient {
	return &injureClient{cc}
}

func (c *injureClient) Methods(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/injure.Injure/Methods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *injureClient) RecoverAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/injure.Injure/RecoverAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *injureClient) RecoverMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/injure.Injure/RecoverMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *injureClient) SetFault(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/injure.Injure/SetFault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *injureClient) SetFaultAll(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/injure.Injure/SetFaultAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InjureServer is the server API for Injure service.
type InjureServer interface {
	Methods(context.Context, *empty.Empty) (*Response, error)
	RecoverAll(context.Context, *empty.Empty) (*empty.Empty, error)
	RecoverMethod(context.Context, *Request) (*empty.Empty, error)
	SetFault(context.Context, *Request) (*empty.Empty, error)
	SetFaultAll(context.Context, *Request) (*empty.Empty, error)
}

func RegisterInjureServer(s *grpc.Server, srv InjureServer) {
	s.RegisterService(&_Injure_serviceDesc, srv)
}

func _Injure_Methods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InjureServer).Methods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injure.Injure/Methods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InjureServer).Methods(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Injure_RecoverAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InjureServer).RecoverAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injure.Injure/RecoverAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InjureServer).RecoverAll(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Injure_RecoverMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InjureServer).RecoverMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injure.Injure/RecoverMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InjureServer).RecoverMethod(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Injure_SetFault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InjureServer).SetFault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injure.Injure/SetFault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InjureServer).SetFault(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Injure_SetFaultAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InjureServer).SetFaultAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injure.Injure/SetFaultAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InjureServer).SetFaultAll(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Injure_serviceDesc = grpc.ServiceDesc{
	ServiceName: "injure.Injure",
	HandlerType: (*InjureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Methods",
			Handler:    _Injure_Methods_Handler,
		},
		{
			MethodName: "RecoverAll",
			Handler:    _Injure_RecoverAll_Handler,
		},
		{
			MethodName: "RecoverMethod",
			Handler:    _Injure_RecoverMethod_Handler,
		},
		{
			MethodName: "SetFault",
			Handler:    _Injure_SetFault_Handler,
		},
		{
			MethodName: "SetFaultAll",
			Handler:    _Injure_SetFaultAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "injure.proto",
}

func init() { proto.RegisterFile("injure.proto", fileDescriptor_injure_ae03b3a2c9d5da6e) }

var fileDescriptor_injure_ae03b3a2c9d5da6e = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0xc1, 0x4a, 0xfb, 0x40,
	0x10, 0xc6, 0x9b, 0xa6, 0x4d, 0xd2, 0xf9, 0xff, 0x8b, 0x65, 0x90, 0xb2, 0xd4, 0x4b, 0x08, 0x1e,
	0x72, 0x4a, 0x41, 0x29, 0x88, 0x07, 0xc1, 0x83, 0x82, 0x07, 0x2f, 0xeb, 0x13, 0xa4, 0xcd, 0xd8,
	0x2a, 0x9b, 0xec, 0xba, 0xd9, 0x08, 0x7d, 0x08, 0xdf, 0xc4, 0x87, 0x94, 0xec, 0x26, 0x78, 0x8a,
	0xe8, 0x6d, 0xbe, 0x61, 0x7e, 0x33, 0xdf, 0x37, 0xf0, 0xff, 0xa5, 0x7a, 0x6d, 0x34, 0x65, 0x4a,
	0x4b, 0x23, 0x31, 0x70, 0x6a, 0x75, 0xb6, 0x97, 0x72, 0x2f, 0x68, 0x6d, 0xbb, 0xdb, 0xe6, 0x79,
	0x4d, 0xa5, 0x32, 0x47, 0x37, 0x94, 0x7c, 0x78, 0x10, 0x72, 0x7a, 0x6b, 0xa8, 0x36, 0xc8, 0x20,
	0x2c, 0xc9, 0x1c, 0x64, 0x51, 0x33, 0x2f, 0xf6, 0xd3, 0x19, 0xef, 0x25, 0x9e, 0xc2, 0x94, 0xb4,
	0xae, 0x24, 0x1b, 0xc7, 0x5e, 0x3a, 0xe7, 0x4e, 0xe0, 0x12, 0x02, 0x9d, 0x57, 0x85, 0x2c, 0x99,
	0x1f, 0x7b, 0x69, 0xc4, 0x3b, 0x85, 0x0b, 0xf0, 0xd5, 0xce, 0xb0, 0x89, 0x9d, 0x6d, 0x4b, 0x44,
	0x98, 0xa8, 0xdc, 0x1c, 0xd8, 0x34, 0xf6, 0xd2, 0x19, 0xb7, 0x75, 0xbb, 0xb3, 0x20, 0x91, 0x1f,
	0x59, 0xe0, 0x76, 0x5a, 0x91, 0x9c, 0x43, 0xc4, 0xa9, 0x56, 0xb2, 0xaa, 0x69, 0xd8, 0xcf, 0xc5,
	0xe7, 0x18, 0x82, 0x07, 0x9b, 0x0e, 0x37, 0x10, 0x3e, 0x76, 0x2e, 0x97, 0x99, 0x4b, 0x9a, 0xf5,
	0x49, 0xb3, 0xbb, 0x36, 0xe9, 0x6a, 0x91, 0x75, 0x7f, 0xe9, 0x37, 0x27, 0x23, 0xbc, 0x01, 0xe0,
	0xb4, 0x93, 0xef, 0xa4, 0x6f, 0x85, 0x18, 0x24, 0x07, 0xfa, 0xc9, 0x08, 0xaf, 0x61, 0xde, 0xf1,
	0xee, 0x3a, 0x9e, 0x7c, 0x1f, 0xb1, 0xdf, 0xfc, 0x81, 0xdd, 0x40, 0xf4, 0x44, 0xe6, 0x3e, 0x6f,
	0x84, 0xf9, 0x0b, 0x76, 0x05, 0xff, 0x7a, 0xac, 0xf5, 0xfc, 0x7b, 0x72, 0x1b, 0xd8, 0xce, 0xe5,
	0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x68, 0x72, 0x37, 0x20, 0x02, 0x00, 0x00,
}
