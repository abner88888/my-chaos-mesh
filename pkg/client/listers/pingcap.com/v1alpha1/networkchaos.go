/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pingcap/chaos-operator/pkg/apis/pingcap.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetworkChaosLister helps list NetworkChaoses.
type NetworkChaosLister interface {
	// List lists all NetworkChaoses in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkChaos, err error)
	// NetworkChaoses returns an object that can list and get NetworkChaoses.
	NetworkChaoses(namespace string) NetworkChaosNamespaceLister
	NetworkChaosListerExpansion
}

// networkChaosLister implements the NetworkChaosLister interface.
type networkChaosLister struct {
	indexer cache.Indexer
}

// NewNetworkChaosLister returns a new NetworkChaosLister.
func NewNetworkChaosLister(indexer cache.Indexer) NetworkChaosLister {
	return &networkChaosLister{indexer: indexer}
}

// List lists all NetworkChaoses in the indexer.
func (s *networkChaosLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkChaos, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkChaos))
	})
	return ret, err
}

// NetworkChaoses returns an object that can list and get NetworkChaoses.
func (s *networkChaosLister) NetworkChaoses(namespace string) NetworkChaosNamespaceLister {
	return networkChaosNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetworkChaosNamespaceLister helps list and get NetworkChaoses.
type NetworkChaosNamespaceLister interface {
	// List lists all NetworkChaoses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.NetworkChaos, err error)
	// Get retrieves the NetworkChaos from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.NetworkChaos, error)
	NetworkChaosNamespaceListerExpansion
}

// networkChaosNamespaceLister implements the NetworkChaosNamespaceLister
// interface.
type networkChaosNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NetworkChaoses in the indexer for a given namespace.
func (s networkChaosNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NetworkChaos, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NetworkChaos))
	})
	return ret, err
}

// Get retrieves the NetworkChaos from the indexer for a given namespace and name.
func (s networkChaosNamespaceLister) Get(name string) (*v1alpha1.NetworkChaos, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("networkchaos"), name)
	}
	return obj.(*v1alpha1.NetworkChaos), nil
}
