/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/pingcap/chaos-operator/pkg/apis/pingcap.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PodChaosLister helps list PodChaoses.
type PodChaosLister interface {
	// List lists all PodChaoses in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PodChaos, err error)
	// PodChaoses returns an object that can list and get PodChaoses.
	PodChaoses(namespace string) PodChaosNamespaceLister
	PodChaosListerExpansion
}

// podChaosLister implements the PodChaosLister interface.
type podChaosLister struct {
	indexer cache.Indexer
}

// NewPodChaosLister returns a new PodChaosLister.
func NewPodChaosLister(indexer cache.Indexer) PodChaosLister {
	return &podChaosLister{indexer: indexer}
}

// List lists all PodChaoses in the indexer.
func (s *podChaosLister) List(selector labels.Selector) (ret []*v1alpha1.PodChaos, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PodChaos))
	})
	return ret, err
}

// PodChaoses returns an object that can list and get PodChaoses.
func (s *podChaosLister) PodChaoses(namespace string) PodChaosNamespaceLister {
	return podChaosNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PodChaosNamespaceLister helps list and get PodChaoses.
type PodChaosNamespaceLister interface {
	// List lists all PodChaoses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PodChaos, err error)
	// Get retrieves the PodChaos from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PodChaos, error)
	PodChaosNamespaceListerExpansion
}

// podChaosNamespaceLister implements the PodChaosNamespaceLister
// interface.
type podChaosNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PodChaoses in the indexer for a given namespace.
func (s podChaosNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PodChaos, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PodChaos))
	})
	return ret, err
}

// Get retrieves the PodChaos from the indexer for a given namespace and name.
func (s podChaosNamespaceLister) Get(name string) (*v1alpha1.PodChaos, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("podchaos"), name)
	}
	return obj.(*v1alpha1.PodChaos), nil
}
