// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type ObjectMeta interface {
	IsObjectMeta()
}

type TypeMeta interface {
	IsTypeMeta()
}

type HTTPChaos struct {
	Kind                       string                 `json:"kind"`
	APIVersion                 string                 `json:"apiVersion"`
	Name                       string                 `json:"name"`
	GenerateName               string                 `json:"generateName"`
	Namespace                  string                 `json:"namespace"`
	SelfLink                   string                 `json:"selfLink"`
	UID                        string                 `json:"uid"`
	ResourceVersion            string                 `json:"resourceVersion"`
	Generation                 int                    `json:"generation"`
	CreationTimestamp          time.Time              `json:"creationTimestamp"`
	DeletionTimestamp          *time.Time             `json:"deletionTimestamp"`
	DeletionGracePeriodSeconds *int                   `json:"deletionGracePeriodSeconds"`
	Labels                     map[string]interface{} `json:"labels"`
	Annotations                map[string]interface{} `json:"annotations"`
	OwnerReferences            []*OwnerReference      `json:"ownerReferences"`
	Finalizers                 []string               `json:"finalizers"`
	ClusterName                string                 `json:"clusterName"`
	Podchaos                   []*PodHTTPChaos        `json:"podchaos"`
}

func (HTTPChaos) IsTypeMeta()   {}
func (HTTPChaos) IsObjectMeta() {}

type IOChaos struct {
	Kind                       string                 `json:"kind"`
	APIVersion                 string                 `json:"apiVersion"`
	Name                       string                 `json:"name"`
	GenerateName               string                 `json:"generateName"`
	Namespace                  string                 `json:"namespace"`
	SelfLink                   string                 `json:"selfLink"`
	UID                        string                 `json:"uid"`
	ResourceVersion            string                 `json:"resourceVersion"`
	Generation                 int                    `json:"generation"`
	CreationTimestamp          time.Time              `json:"creationTimestamp"`
	DeletionTimestamp          *time.Time             `json:"deletionTimestamp"`
	DeletionGracePeriodSeconds *int                   `json:"deletionGracePeriodSeconds"`
	Labels                     map[string]interface{} `json:"labels"`
	Annotations                map[string]interface{} `json:"annotations"`
	OwnerReferences            []*OwnerReference      `json:"ownerReferences"`
	Finalizers                 []string               `json:"finalizers"`
	ClusterName                string                 `json:"clusterName"`
	Podchaos                   []*PodIOChaos          `json:"podchaos"`
}

func (IOChaos) IsTypeMeta()   {}
func (IOChaos) IsObjectMeta() {}

type Namespace struct {
	Ns              string             `json:"ns"`
	Logs            string             `json:"logs"`
	Pod             []*Pod             `json:"pod"`
	StressChaos     []*StressChaos     `json:"stressChaos"`
	IoChaos         []*IOChaos         `json:"ioChaos"`
	PodIOChaos      []*PodIOChaos      `json:"podIOChaos"`
	HTTPChaos       []*HTTPChaos       `json:"httpChaos"`
	PodHTTPChaos    []*PodHTTPChaos    `json:"podHTTPChaos"`
	NetworkChaos    []*NetworkChaos    `json:"networkChaos"`
	PodNetworkChaos []*PodNetWorkChaos `json:"podNetworkChaos"`
}

type NetworkChaos struct {
	Kind                       string                 `json:"kind"`
	APIVersion                 string                 `json:"apiVersion"`
	Name                       string                 `json:"name"`
	GenerateName               string                 `json:"generateName"`
	Namespace                  string                 `json:"namespace"`
	SelfLink                   string                 `json:"selfLink"`
	UID                        string                 `json:"uid"`
	ResourceVersion            string                 `json:"resourceVersion"`
	Generation                 int                    `json:"generation"`
	CreationTimestamp          time.Time              `json:"creationTimestamp"`
	DeletionTimestamp          *time.Time             `json:"deletionTimestamp"`
	DeletionGracePeriodSeconds *int                   `json:"deletionGracePeriodSeconds"`
	Labels                     map[string]interface{} `json:"labels"`
	Annotations                map[string]interface{} `json:"annotations"`
	OwnerReferences            []*OwnerReference      `json:"ownerReferences"`
	Finalizers                 []string               `json:"finalizers"`
	ClusterName                string                 `json:"clusterName"`
	Podchaos                   []*NetworkChaos        `json:"podchaos"`
}

func (NetworkChaos) IsTypeMeta()   {}
func (NetworkChaos) IsObjectMeta() {}

type OwnerReference struct {
	Kind               string `json:"kind"`
	APIVersion         string `json:"apiVersion"`
	Name               string `json:"name"`
	UID                string `json:"uid"`
	Controller         *bool  `json:"controller"`
	BlockOwnerDeletion *bool  `json:"blockOwnerDeletion"`
}

type Pod struct {
	Kind                       string                 `json:"kind"`
	APIVersion                 string                 `json:"apiVersion"`
	Name                       string                 `json:"name"`
	GenerateName               string                 `json:"generateName"`
	Namespace                  string                 `json:"namespace"`
	SelfLink                   string                 `json:"selfLink"`
	UID                        string                 `json:"uid"`
	ResourceVersion            string                 `json:"resourceVersion"`
	Generation                 int                    `json:"generation"`
	CreationTimestamp          time.Time              `json:"creationTimestamp"`
	DeletionTimestamp          *time.Time             `json:"deletionTimestamp"`
	DeletionGracePeriodSeconds *int                   `json:"deletionGracePeriodSeconds"`
	Labels                     map[string]interface{} `json:"labels"`
	Annotations                map[string]interface{} `json:"annotations"`
	OwnerReferences            []*OwnerReference      `json:"ownerReferences"`
	Finalizers                 []string               `json:"finalizers"`
	ClusterName                string                 `json:"clusterName"`
}

func (Pod) IsTypeMeta()   {}
func (Pod) IsObjectMeta() {}

type PodHTTPChaos struct {
	Kind                       string                 `json:"kind"`
	APIVersion                 string                 `json:"apiVersion"`
	Name                       string                 `json:"name"`
	GenerateName               string                 `json:"generateName"`
	Namespace                  string                 `json:"namespace"`
	SelfLink                   string                 `json:"selfLink"`
	UID                        string                 `json:"uid"`
	ResourceVersion            string                 `json:"resourceVersion"`
	Generation                 int                    `json:"generation"`
	CreationTimestamp          time.Time              `json:"creationTimestamp"`
	DeletionTimestamp          *time.Time             `json:"deletionTimestamp"`
	DeletionGracePeriodSeconds *int                   `json:"deletionGracePeriodSeconds"`
	Labels                     map[string]interface{} `json:"labels"`
	Annotations                map[string]interface{} `json:"annotations"`
	OwnerReferences            []*OwnerReference      `json:"ownerReferences"`
	Finalizers                 []string               `json:"finalizers"`
	ClusterName                string                 `json:"clusterName"`
	Pod                        *Pod                   `json:"pod"`
}

func (PodHTTPChaos) IsTypeMeta()   {}
func (PodHTTPChaos) IsObjectMeta() {}

type PodIOChaos struct {
	Kind                       string                 `json:"kind"`
	APIVersion                 string                 `json:"apiVersion"`
	Name                       string                 `json:"name"`
	GenerateName               string                 `json:"generateName"`
	Namespace                  string                 `json:"namespace"`
	SelfLink                   string                 `json:"selfLink"`
	UID                        string                 `json:"uid"`
	ResourceVersion            string                 `json:"resourceVersion"`
	Generation                 int                    `json:"generation"`
	CreationTimestamp          time.Time              `json:"creationTimestamp"`
	DeletionTimestamp          *time.Time             `json:"deletionTimestamp"`
	DeletionGracePeriodSeconds *int                   `json:"deletionGracePeriodSeconds"`
	Labels                     map[string]interface{} `json:"labels"`
	Annotations                map[string]interface{} `json:"annotations"`
	OwnerReferences            []*OwnerReference      `json:"ownerReferences"`
	Finalizers                 []string               `json:"finalizers"`
	ClusterName                string                 `json:"clusterName"`
	Pod                        *Pod                   `json:"pod"`
}

type PodNetWorkChaos struct {
	Kind                       string                 `json:"kind"`
	APIVersion                 string                 `json:"apiVersion"`
	Name                       string                 `json:"name"`
	GenerateName               string                 `json:"generateName"`
	Namespace                  string                 `json:"namespace"`
	SelfLink                   string                 `json:"selfLink"`
	UID                        string                 `json:"uid"`
	ResourceVersion            string                 `json:"resourceVersion"`
	Generation                 int                    `json:"generation"`
	CreationTimestamp          time.Time              `json:"creationTimestamp"`
	DeletionTimestamp          *time.Time             `json:"deletionTimestamp"`
	DeletionGracePeriodSeconds *int                   `json:"deletionGracePeriodSeconds"`
	Labels                     map[string]interface{} `json:"labels"`
	Annotations                map[string]interface{} `json:"annotations"`
	OwnerReferences            []*OwnerReference      `json:"ownerReferences"`
	Finalizers                 []string               `json:"finalizers"`
	ClusterName                string                 `json:"clusterName"`
	Pod                        *Pod                   `json:"pod"`
}

func (PodNetWorkChaos) IsTypeMeta()   {}
func (PodNetWorkChaos) IsObjectMeta() {}

type StressChaos struct {
	Kind                       string                 `json:"kind"`
	APIVersion                 string                 `json:"apiVersion"`
	Name                       string                 `json:"name"`
	GenerateName               string                 `json:"generateName"`
	Namespace                  string                 `json:"namespace"`
	SelfLink                   string                 `json:"selfLink"`
	UID                        string                 `json:"uid"`
	ResourceVersion            string                 `json:"resourceVersion"`
	Generation                 int                    `json:"generation"`
	CreationTimestamp          time.Time              `json:"creationTimestamp"`
	DeletionTimestamp          *time.Time             `json:"deletionTimestamp"`
	DeletionGracePeriodSeconds *int                   `json:"deletionGracePeriodSeconds"`
	Labels                     map[string]interface{} `json:"labels"`
	Annotations                map[string]interface{} `json:"annotations"`
	OwnerReferences            []*OwnerReference      `json:"ownerReferences"`
	Finalizers                 []string               `json:"finalizers"`
	ClusterName                string                 `json:"clusterName"`
}

func (StressChaos) IsTypeMeta()   {}
func (StressChaos) IsObjectMeta() {}

type Component string

const (
	ComponentManager   Component = "MANAGER"
	ComponentDaemon    Component = "DAEMON"
	ComponentDashboard Component = "DASHBOARD"
	ComponentDNSServer Component = "DNSSERVER"
)

var AllComponent = []Component{
	ComponentManager,
	ComponentDaemon,
	ComponentDashboard,
	ComponentDNSServer,
}

func (e Component) IsValid() bool {
	switch e {
	case ComponentManager, ComponentDaemon, ComponentDashboard, ComponentDNSServer:
		return true
	}
	return false
}

func (e Component) String() string {
	return string(e)
}

func (e *Component) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Component(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Component", str)
	}
	return nil
}

func (e Component) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
