directive @goModel(model: String, models: [String!]) on OBJECT
    | INPUT_OBJECT
    | SCALAR
    | ENUM
    | INTERFACE
    | UNION

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION

schema {
    query: Query
}

type Query {
    namepsace(ns: String): Namespace!
}

type Namespace {
    ns: String!
    component(component: Component!): Pod!      @goField(forceResolver: true)
    pod(name: String!): Pod!                    @goField(forceResolver: true)
    pods: [Pod!]                                @goField(forceResolver: true)
    stress(name: String!): StressChaos!         @goField(forceResolver: true)
    stresses: [StressChaos!]                    @goField(forceResolver: true)
    io(name: String!): IOChaos!                 @goField(forceResolver: true)
    ios: [IOChaos!]                             @goField(forceResolver: true)
    podio(name: String!): PodIOChaos!           @goField(forceResolver: true)
    podios: [PodIOChaos!]                       @goField(forceResolver: true)
    http(name: String!): HTTPChaos!             @goField(forceResolver: true)
    https: [HTTPChaos!]                         @goField(forceResolver: true)
    podhttp(name: String!): PodHTTPChaos!       @goField(forceResolver: true)
    podhttps: [PodHTTPChaos!]                   @goField(forceResolver: true)
    network(name: String!): NetworkChaos!       @goField(forceResolver: true)
    networks: [NetworkChaos!]                   @goField(forceResolver: true)
    podnetwork(name: String!): PodNetWorkChaos! @goField(forceResolver: true)
    podnetworks: [PodNetWorkChaos!]             @goField(forceResolver: true)
}

scalar Time
scalar Map

type OwnerReference @goModel(model: "k8s.io/apimachinery/pkg/apis/meta/v1.OwnerReference") {
    kind: String!
    apiVersion: String!
    name: String!
    uid: String!
    controller: Boolean
    blockOwnerDeletion: Boolean
}

enum Component {
    MANAGER
    DAEMON
    DASHBOARD
    DNSSERVER
}

type Pod @goModel(model: "k8s.io/api/core/v1.Pod") {
    kind: String!
    apiVersion: String!
    name: String!
    generateName: String!
    namespace: String!
    selfLink: String!
    uid: String! 
    resourceVersion: String!
    generation: Int!
    creationTimestamp: Time!
    deletionTimestamp: Time
    deletionGracePeriodSeconds: Int
    labels: Map
    annotations: Map
    ownerReferences: [OwnerReference!]
    finalizers: [String!]
    clusterName: String!
}

type PodIOChaos {
    kind: String!
    apiVersion: String!
    name: String!
    generateName: String!
    namespace: String!
    selfLink: String!
    uid: String! 
    resourceVersion: String!
    generation: Int!
    creationTimestamp: Time!
    deletionTimestamp: Time
    deletionGracePeriodSeconds: Int
    labels: Map
    annotations: Map
    ownerReferences: [OwnerReference!]
    finalizers: [String!]
    clusterName: String!

    pod: Pod!
}

type IOChaos {
    kind: String!
    apiVersion: String!
    name: String!
    generateName: String!
    namespace: String!
    selfLink: String!
    uid: String! 
    resourceVersion: String!
    generation: Int!
    creationTimestamp: Time!
    deletionTimestamp: Time
    deletionGracePeriodSeconds: Int
    labels: Map
    annotations: Map
    ownerReferences: [OwnerReference!]
    finalizers: [String!]
    clusterName: String!

    podchaos: [PodIOChaos!]
}

type PodHTTPChaos {
    kind: String!
    apiVersion: String!
    name: String!
    generateName: String!
    namespace: String!
    selfLink: String!
    uid: String! 
    resourceVersion: String!
    generation: Int!
    creationTimestamp: Time!
    deletionTimestamp: Time
    deletionGracePeriodSeconds: Int
    labels: Map
    annotations: Map
    ownerReferences: [OwnerReference!]
    finalizers: [String!]
    clusterName: String!

    pod: Pod!
}

type HTTPChaos {
    kind: String!
    apiVersion: String!
    name: String!
    generateName: String!
    namespace: String!
    selfLink: String!
    uid: String! 
    resourceVersion: String!
    generation: Int!
    creationTimestamp: Time!
    deletionTimestamp: Time
    deletionGracePeriodSeconds: Int
    labels: Map
    annotations: Map
    ownerReferences: [OwnerReference!]
    finalizers: [String!]
    clusterName: String!

    podchaos: [PodHTTPChaos!]
}

type PodNetWorkChaos {
    kind: String!
    apiVersion: String!
    name: String!
    generateName: String!
    namespace: String!
    selfLink: String!
    uid: String! 
    resourceVersion: String!
    generation: Int!
    creationTimestamp: Time!
    deletionTimestamp: Time
    deletionGracePeriodSeconds: Int
    labels: Map
    annotations: Map
    ownerReferences: [OwnerReference!]
    finalizers: [String!]
    clusterName: String!

    pod: Pod!
}

type NetworkChaos {
    kind: String!
    apiVersion: String!
    name: String!
    generateName: String!
    namespace: String!
    selfLink: String!
    uid: String! 
    resourceVersion: String!
    generation: Int!
    creationTimestamp: Time!
    deletionTimestamp: Time
    deletionGracePeriodSeconds: Int
    labels: Map
    annotations: Map
    ownerReferences: [OwnerReference!]
    finalizers: [String!]
    clusterName: String!

    podchaos: [NetworkChaos!]
}

type StressChaos {
    kind: String!
    apiVersion: String!
    name: String!
    generateName: String!
    namespace: String!
    selfLink: String!
    uid: String! 
    resourceVersion: String!
    generation: Int!
    creationTimestamp: Time!
    deletionTimestamp: Time
    deletionGracePeriodSeconds: Int
    labels: Map
    annotations: Map
    ownerReferences: [OwnerReference!]
    finalizers: [String!]
    clusterName: String!
}

