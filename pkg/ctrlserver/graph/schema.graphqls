directive @goModel(model: String, models: [String!]) on OBJECT
    | INPUT_OBJECT
    | SCALAR
    | ENUM
    | INTERFACE
    | UNION

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION

scalar Time
scalar Map

schema {
    query: Query
    subscription: Logger
}

type Query {
    namepsace(ns: String): Namespace!
}

type Logger {
    component(ns: String!, component: Component!): String!  @goField(forceResolver: true)
    pod(ns: String!, name: String!): String!                @goField(forceResolver: true)
}

type Namespace {
    ns: String!
    component(component: Component!): Pod!      @goField(forceResolver: true)
    pod(name: String!): Pod!                    @goField(forceResolver: true)
    pods: [Pod!]                                @goField(forceResolver: true)
    stress(name: String!): StressChaos!         @goField(forceResolver: true)
    stresses: [StressChaos!]                    @goField(forceResolver: true)
    io(name: String!): IOChaos!                 @goField(forceResolver: true)
    ios: [IOChaos!]                             @goField(forceResolver: true)
    podio(name: String!): PodIOChaos!           @goField(forceResolver: true)
    podios: [PodIOChaos!]                       @goField(forceResolver: true)
    http(name: String!): HTTPChaos!             @goField(forceResolver: true)
    https: [HTTPChaos!]                         @goField(forceResolver: true)
    podhttp(name: String!): PodHTTPChaos!       @goField(forceResolver: true)
    podhttps: [PodHTTPChaos!]                   @goField(forceResolver: true)
    network(name: String!): NetworkChaos!       @goField(forceResolver: true)
    networks: [NetworkChaos!]                   @goField(forceResolver: true)
    podnetwork(name: String!): PodNetworkChaos! @goField(forceResolver: true)
    podnetworks: [PodNetworkChaos!]             @goField(forceResolver: true)
}

type OwnerReference @goModel(model: "k8s.io/apimachinery/pkg/apis/meta/v1.OwnerReference") {
    kind: String!
    apiVersion: String!
    name: String!
    uid: String!
    controller: Boolean
    blockOwnerDeletion: Boolean
}

enum Component {
    MANAGER
    DAEMON
    DASHBOARD
    DNSSERVER
}

type Pod @goModel(model: "k8s.io/api/core/v1.Pod") {
    kind: String!
    apiVersion: String!
    name: String!
    generateName: String!
    namespace: String!
    selfLink: String!
    uid: String! 
    resourceVersion: String!
    generation: Int!
    creationTimestamp: Time!
    deletionTimestamp: Time
    deletionGracePeriodSeconds: Int
    labels: Map
    annotations: Map
    ownerReferences: [OwnerReference!]
    finalizers: [String!]
    clusterName: String!
}


type PodIOChaos @goModel(model: "github.com/chaos-mesh/chaos-mesh/api/v1alpha1.PodIOChaos") {
    kind: String!
    apiVersion: String!
    name: String!
    generateName: String!
    namespace: String!
    selfLink: String!
    uid: String! 
    resourceVersion: String!
    generation: Int!
    creationTimestamp: Time!
    deletionTimestamp: Time
    deletionGracePeriodSeconds: Int
    labels: Map
    annotations: Map
    ownerReferences: [OwnerReference!]
    finalizers: [String!]
    clusterName: String!

    spec: PodIOChaosSpec!
    status: PodIOChaosStatus!

    pod: Pod!       @goField(forceResolver: true)
    ios: [IOChaos!] @goField(forceResolver: true)
}

# PodIOChaosSpec defines the desired state of PodIOChaos
type PodIOChaosSpec @goModel(model: "github.com/chaos-mesh/chaos-mesh/api/v1alpha1.PodIOChaosSpec") {
	# volumeMountPath represents the target mount path
	# It must be a root of mount path now.
	volumeMountPath: String!

	container: String

    # actions are a list of IOChaos actions
	actions: [IOChaosAction!]
}

type PodIOChaosStatus @goModel(model: "github.com/chaos-mesh/chaos-mesh/api/v1alpha1.PodIOChaosStatus") {

	# pid represents a running toda process id
	pid: Int

	# startTime represents the start time of a toda process
	startTime: Int
	failedMessage: String
	observedGeneration: Int
}

# IOChaosAction defines an possible action of IOChaos
type IOChaosAction @goModel(model: "github.com/chaos-mesh/chaos-mesh/api/v1alpha1.IOChaosAction") {
	type: String!

	# path represents a glob of injecting path
	path: String!

	# methods represents the method that the action will inject in
	methods: [String!]

	# percent represents the percent probability of injecting this action
	percent: Int

	# faults represents the fault to inject
	faults: [IoFault!]

	# Latency represents the latency to inject
	latency: String

	# attrOverrides represents the attribution to override
	ino: Int
	size: Int
	blocks: Int
	atime: Timespec
	mtime: Timespec
    ctime: Timespec
	kind: String # the file kind
	perm: Int
	nlink: Int
	uid: Int
    gid: Int
    rdev: Int

	# MistakeSpec represents the mistake to inject
	
    # filling determines what is filled in the miskate data.
	filling: String

	# there will be [1, MaxOccurrences] segments of wrong data.
	maxOccurrences: Int

	# max length of each wrong data segment in bytes
	maxLength: Int

	# source represents the source of current rules
	source: String!
}

type IoFault @goModel(model: "github.com/chaos-mesh/chaos-mesh/api/v1alpha1.IoFault") {
	errno: Int
	weight: Int
}

# Timespec represents a time
type Timespec @goModel(model: "github.com/chaos-mesh/chaos-mesh/api/v1alpha1.Timespec") {
	sec: Int
	nsec: Int
}


type IOChaos @goModel(model: "github.com/chaos-mesh/chaos-mesh/api/v1alpha1.IOChaos") {
    kind: String!
    apiVersion: String!
    name: String!
    generateName: String!
    namespace: String!
    selfLink: String!
    uid: String! 
    resourceVersion: String!
    generation: Int!
    creationTimestamp: Time!
    deletionTimestamp: Time
    deletionGracePeriodSeconds: Int
    labels: Map
    annotations: Map
    ownerReferences: [OwnerReference!]
    finalizers: [String!]
    clusterName: String!
}

type PodHTTPChaos @goModel(model: "github.com/chaos-mesh/chaos-mesh/api/v1alpha1.PodHttpChaos") {
    kind: String!
    apiVersion: String!
    name: String!
    generateName: String!
    namespace: String!
    selfLink: String!
    uid: String! 
    resourceVersion: String!
    generation: Int!
    creationTimestamp: Time!
    deletionTimestamp: Time
    deletionGracePeriodSeconds: Int
    labels: Map
    annotations: Map
    ownerReferences: [OwnerReference!]
    finalizers: [String!]
    clusterName: String!
}

type HTTPChaos @goModel(model: "github.com/chaos-mesh/chaos-mesh/api/v1alpha1.HTTPChaos") {
    kind: String!
    apiVersion: String!
    name: String!
    generateName: String!
    namespace: String!
    selfLink: String!
    uid: String! 
    resourceVersion: String!
    generation: Int!
    creationTimestamp: Time!
    deletionTimestamp: Time
    deletionGracePeriodSeconds: Int
    labels: Map
    annotations: Map
    ownerReferences: [OwnerReference!]
    finalizers: [String!]
    clusterName: String!
}

type PodNetworkChaos @goModel(model: "github.com/chaos-mesh/chaos-mesh/api/v1alpha1.PodNetworkChaos") {
    kind: String!
    apiVersion: String!
    name: String!
    generateName: String!
    namespace: String!
    selfLink: String!
    uid: String! 
    resourceVersion: String!
    generation: Int!
    creationTimestamp: Time!
    deletionTimestamp: Time
    deletionGracePeriodSeconds: Int
    labels: Map
    annotations: Map
    ownerReferences: [OwnerReference!]
    finalizers: [String!]
    clusterName: String!
}

type NetworkChaos @goModel(model: "github.com/chaos-mesh/chaos-mesh/api/v1alpha1.NetworkChaos") {
    kind: String!
    apiVersion: String!
    name: String!
    generateName: String!
    namespace: String!
    selfLink: String!
    uid: String! 
    resourceVersion: String!
    generation: Int!
    creationTimestamp: Time!
    deletionTimestamp: Time
    deletionGracePeriodSeconds: Int
    labels: Map
    annotations: Map
    ownerReferences: [OwnerReference!]
    finalizers: [String!]
    clusterName: String!
}

type StressChaos @goModel(model: "github.com/chaos-mesh/chaos-mesh/api/v1alpha1.StressChaos") {
    kind: String!
    apiVersion: String!
    name: String!
    generateName: String!
    namespace: String!
    selfLink: String!
    uid: String! 
    resourceVersion: String!
    generation: Int!
    creationTimestamp: Time!
    deletionTimestamp: Time
    deletionGracePeriodSeconds: Int
    labels: Map
    annotations: Map
    ownerReferences: [OwnerReference!]
    finalizers: [String!]
    clusterName: String!
}
