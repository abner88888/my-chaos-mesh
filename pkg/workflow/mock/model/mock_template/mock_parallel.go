// Copyright Chaos Mesh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: ./model/template/parallel.go

// Package mock_template is a generated GoMock package.
package mock_template

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	template "github.com/chaos-mesh/chaos-mesh/pkg/workflow/model/template"
)

// MockParallelTemplate is a mock of ParallelTemplate interface.
type MockParallelTemplate struct {
	ctrl     *gomock.Controller
	recorder *MockParallelTemplateMockRecorder
}

// MockParallelTemplateMockRecorder is the mock recorder for MockParallelTemplate.
type MockParallelTemplateMockRecorder struct {
	mock *MockParallelTemplate
}

// NewMockParallelTemplate creates a new mock instance.
func NewMockParallelTemplate(ctrl *gomock.Controller) *MockParallelTemplate {
	mock := &MockParallelTemplate{ctrl: ctrl}
	mock.recorder = &MockParallelTemplateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParallelTemplate) EXPECT() *MockParallelTemplateMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockParallelTemplate) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockParallelTemplateMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockParallelTemplate)(nil).Name))
}

// ParallelChildrenList mocks base method.
func (m *MockParallelTemplate) ParallelChildrenList() []template.Template {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParallelChildrenList")
	ret0, _ := ret[0].([]template.Template)
	return ret0
}

// ParallelChildrenList indicates an expected call of ParallelChildrenList.
func (mr *MockParallelTemplateMockRecorder) ParallelChildrenList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParallelChildrenList", reflect.TypeOf((*MockParallelTemplate)(nil).ParallelChildrenList))
}

// TemplateType mocks base method.
func (m *MockParallelTemplate) TemplateType() template.TemplateType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateType")
	ret0, _ := ret[0].(template.TemplateType)
	return ret0
}

// TemplateType indicates an expected call of TemplateType.
func (mr *MockParallelTemplateMockRecorder) TemplateType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateType", reflect.TypeOf((*MockParallelTemplate)(nil).TemplateType))
}
