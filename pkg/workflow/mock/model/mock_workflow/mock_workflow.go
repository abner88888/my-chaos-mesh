// Copyright Chaos Mesh Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: ./model/workflow/workflow.go

// Package mock_workflow is a generated GoMock package.
package mock_workflow

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	node "github.com/chaos-mesh/chaos-mesh/pkg/workflow/model/node"
	template "github.com/chaos-mesh/chaos-mesh/pkg/workflow/model/template"
	workflow "github.com/chaos-mesh/chaos-mesh/pkg/workflow/model/workflow"
)

// MockWorkflowSpec is a mock of WorkflowSpec interface.
type MockWorkflowSpec struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowSpecMockRecorder
}

// MockWorkflowSpecMockRecorder is the mock recorder for MockWorkflowSpec.
type MockWorkflowSpecMockRecorder struct {
	mock *MockWorkflowSpec
}

// NewMockWorkflowSpec creates a new mock instance.
func NewMockWorkflowSpec(ctrl *gomock.Controller) *MockWorkflowSpec {
	mock := &MockWorkflowSpec{ctrl: ctrl}
	mock.recorder = &MockWorkflowSpecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowSpec) EXPECT() *MockWorkflowSpecMockRecorder {
	return m.recorder
}

// Entry mocks base method.
func (m *MockWorkflowSpec) Entry() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Entry")
	ret0, _ := ret[0].(string)
	return ret0
}

// Entry indicates an expected call of Entry.
func (mr *MockWorkflowSpecMockRecorder) Entry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Entry", reflect.TypeOf((*MockWorkflowSpec)(nil).Entry))
}

// FetchTemplateByName mocks base method.
func (m *MockWorkflowSpec) FetchTemplateByName(templateName string) (template.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTemplateByName", templateName)
	ret0, _ := ret[0].(template.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTemplateByName indicates an expected call of FetchTemplateByName.
func (mr *MockWorkflowSpecMockRecorder) FetchTemplateByName(templateName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTemplateByName", reflect.TypeOf((*MockWorkflowSpec)(nil).FetchTemplateByName), templateName)
}

// Name mocks base method.
func (m *MockWorkflowSpec) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockWorkflowSpecMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockWorkflowSpec)(nil).Name))
}

// MockWorkflowStatus is a mock of WorkflowStatus interface.
type MockWorkflowStatus struct {
	ctrl     *gomock.Controller
	recorder *MockWorkflowStatusMockRecorder
}

// MockWorkflowStatusMockRecorder is the mock recorder for MockWorkflowStatus.
type MockWorkflowStatusMockRecorder struct {
	mock *MockWorkflowStatus
}

// NewMockWorkflowStatus creates a new mock instance.
func NewMockWorkflowStatus(ctrl *gomock.Controller) *MockWorkflowStatus {
	mock := &MockWorkflowStatus{ctrl: ctrl}
	mock.recorder = &MockWorkflowStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkflowStatus) EXPECT() *MockWorkflowStatusMockRecorder {
	return m.recorder
}

// FetchNodeByName mocks base method.
func (m *MockWorkflowStatus) FetchNodeByName(nodeName string) (node.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchNodeByName", nodeName)
	ret0, _ := ret[0].(node.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchNodeByName indicates an expected call of FetchNodeByName.
func (mr *MockWorkflowStatusMockRecorder) FetchNodeByName(nodeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchNodeByName", reflect.TypeOf((*MockWorkflowStatus)(nil).FetchNodeByName), nodeName)
}

// Nodes mocks base method.
func (m *MockWorkflowStatus) Nodes() []node.Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nodes")
	ret0, _ := ret[0].([]node.Node)
	return ret0
}

// Nodes indicates an expected call of Nodes.
func (mr *MockWorkflowStatusMockRecorder) Nodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nodes", reflect.TypeOf((*MockWorkflowStatus)(nil).Nodes))
}

// NodesMap mocks base method.
func (m *MockWorkflowStatus) NodesMap() map[string]node.Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodesMap")
	ret0, _ := ret[0].(map[string]node.Node)
	return ret0
}

// NodesMap indicates an expected call of NodesMap.
func (mr *MockWorkflowStatusMockRecorder) NodesMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodesMap", reflect.TypeOf((*MockWorkflowStatus)(nil).NodesMap))
}

// NodesTree mocks base method.
func (m *MockWorkflowStatus) NodesTree() (node.NodeTreeNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodesTree")
	ret0, _ := ret[0].(node.NodeTreeNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodesTree indicates an expected call of NodesTree.
func (mr *MockWorkflowStatusMockRecorder) NodesTree() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodesTree", reflect.TypeOf((*MockWorkflowStatus)(nil).NodesTree))
}

// Phase mocks base method.
func (m *MockWorkflowStatus) Phase() workflow.WorkflowPhase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Phase")
	ret0, _ := ret[0].(workflow.WorkflowPhase)
	return ret0
}

// Phase indicates an expected call of Phase.
func (mr *MockWorkflowStatusMockRecorder) Phase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Phase", reflect.TypeOf((*MockWorkflowStatus)(nil).Phase))
}

// WorkflowSpecName mocks base method.
func (m *MockWorkflowStatus) WorkflowSpecName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowSpecName")
	ret0, _ := ret[0].(string)
	return ret0
}

// WorkflowSpecName indicates an expected call of WorkflowSpecName.
func (mr *MockWorkflowStatusMockRecorder) WorkflowSpecName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowSpecName", reflect.TypeOf((*MockWorkflowStatus)(nil).WorkflowSpecName))
}
